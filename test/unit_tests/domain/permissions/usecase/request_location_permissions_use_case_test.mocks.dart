// Mocks generated by Mockito 5.0.17 from annotations
// in wheather_app/test/unit_tests/domain/permissions/usecase/request_location_permissions_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i4;
import 'package:wheather_app/domain/permissions/service/permissions_service.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [PermissionsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionsService extends _i1.Mock
    implements _i2.PermissionsService {
  MockPermissionsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.PermissionStatus> getLocationPermissions() =>
      (super.noSuchMethod(Invocation.method(#getLocationPermissions, []),
              returnValue: Future<_i4.PermissionStatus>.value(
                  _i4.PermissionStatus.denied))
          as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<_i4.PermissionStatus> requestLocationPermissions() =>
      (super.noSuchMethod(Invocation.method(#requestLocationPermissions, []),
              returnValue: Future<_i4.PermissionStatus>.value(
                  _i4.PermissionStatus.denied))
          as _i3.Future<_i4.PermissionStatus>);
  @override
  _i3.Future<bool> isLocationPermissionsGranted() =>
      (super.noSuchMethod(Invocation.method(#isLocationPermissionsGranted, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> isLocationPermissionsPermanentlyDenied() =>
      (super.noSuchMethod(
          Invocation.method(#isLocationPermissionsPermanentlyDenied, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  _i3.Future<bool> openSettings() =>
      (super.noSuchMethod(Invocation.method(#openSettings, []),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
}
