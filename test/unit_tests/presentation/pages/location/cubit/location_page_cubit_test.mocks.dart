// Mocks generated by Mockito 5.0.17 from annotations
// in wheather_app/test/unit_tests/presentation/pages/location/cubit/location_page_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:location/location.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:permission_handler/permission_handler.dart' as _i8;
import 'package:wheather_app/domain/location/usecase/get_location_data_use_case.dart'
    as _i11;
import 'package:wheather_app/domain/permissions/usecase/is_location_permissions_granted_use_case.dart'
    as _i9;
import 'package:wheather_app/domain/permissions/usecase/is_location_permissions_permanently_denied_use_case.dart'
    as _i10;
import 'package:wheather_app/domain/permissions/usecase/open_settings_use_case.dart'
    as _i4;
import 'package:wheather_app/domain/permissions/usecase/request_location_permission_on_android_use_case.dart'
    as _i6;
import 'package:wheather_app/domain/permissions/usecase/request_location_permissions_use_case.dart'
    as _i7;
import 'package:wheather_app/domain/weather/model/weather.dart' as _i3;
import 'package:wheather_app/domain/weather/usecase/get_weather_by_cords_use_case.dart'
    as _i12;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeLocationData_0 extends _i1.Fake implements _i2.LocationData {}

class _FakeWeather_1 extends _i1.Fake implements _i3.Weather {}

/// A class which mocks [OpenSettingsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockOpenSettingsUseCase extends _i1.Mock
    implements _i4.OpenSettingsUseCase {
  MockOpenSettingsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [RequestLocationPermissionOnAndroidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestLocationPermissionOnAndroidUseCase extends _i1.Mock
    implements _i6.RequestLocationPermissionOnAndroidUseCase {
  MockRequestLocationPermissionOnAndroidUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [RequestLocationPermissionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestLocationPermissionsUseCase extends _i1.Mock
    implements _i7.RequestLocationPermissionsUseCase {
  MockRequestLocationPermissionsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i8.PermissionStatus> call() => (super.noSuchMethod(
          Invocation.method(#call, []),
          returnValue:
              Future<_i8.PermissionStatus>.value(_i8.PermissionStatus.denied))
      as _i5.Future<_i8.PermissionStatus>);
}

/// A class which mocks [IsLocationPermissionsGrantedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsLocationPermissionsGrantedUseCase extends _i1.Mock
    implements _i9.IsLocationPermissionsGrantedUseCase {
  MockIsLocationPermissionsGrantedUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [IsLocationPermissionsPermanentlyDeniedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsLocationPermissionsPermanentlyDeniedUseCase extends _i1.Mock
    implements _i10.IsLocationPermissionsPermanentlyDeniedUseCase {
  MockIsLocationPermissionsPermanentlyDeniedUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> call() => (super.noSuchMethod(Invocation.method(#call, []),
      returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [GetLocationDataUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLocationDataUseCase extends _i1.Mock
    implements _i11.GetLocationDataUseCase {
  MockGetLocationDataUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.LocationData> call() => (super.noSuchMethod(
          Invocation.method(#call, []),
          returnValue: Future<_i2.LocationData>.value(_FakeLocationData_0()))
      as _i5.Future<_i2.LocationData>);
}

/// A class which mocks [GetWeatherByCordsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWeatherByCordsUseCase extends _i1.Mock
    implements _i12.GetWeatherByCordsUseCase {
  MockGetWeatherByCordsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Weather> call(double? lat, double? lon) =>
      (super.noSuchMethod(Invocation.method(#call, [lat, lon]),
              returnValue: Future<_i3.Weather>.value(_FakeWeather_1()))
          as _i5.Future<_i3.Weather>);
}
